name: Test Suite

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repo
        uses: actions/checkout@v2

      - name: Show docker command versions (for later debugging)
        working-directory: ./dev
        run: |
          docker --version
          docker-compose --version

      - name: Login docker to Github packages registry
        working-directory: ./dev
        env:
          EOIN_PAT: ${{secrets.EOIN_PAT}}
        run: echo $EOIN_PAT | docker login docker.pkg.github.com -u eoinkelly --password-stdin

      ##
      # Pull images which can speed up building our images in a later step by providing cached layers.
      #
      # The images might be missing (for various reasons e.g. this might be
      # your first push of this project) These commands won't error if the
      # images are missing - that is what the `|| true` does.
      #
      # If anything is changed in the Dockerfiles on this branch then the
      # cached layers will no longer apply and will be ignored.
      #
      # You may be wondering why we are explictly pulling these images when (in
      # theory) DOCKER_BUILDKIT allows you to pull layers from a remote image.
      # In practice (as of 2020-05-01) we could not get that working in this
      # environment.
      #
      - name: Pull the base Drupal & Frontend images (so we can use it as a source of layers via cache_from)
        working-directory: ./dev
        env:
          EOIN_PAT: ${{secrets.EOIN_PAT}}
        run: |
          docker pull docker.pkg.github.com/ackama/dpc-user-management-module/drupal-dev:latest || true
          docker pull docker.pkg.github.com/ackama/dpc-user-management-module/frontend-dev:latest || true

      - name: Build and start all containers
        working-directory: ./dev
        run: docker-compose up -d --build

      - name: Tag and push the Drupal & Frontend images to the Github packages registry (so we can use them as a source of layers on future builds)
        working-directory: ./dev
        env:
          EOIN_PAT: ${{secrets.EOIN_PAT}}
        run: |
          docker tag dev_drupal:latest docker.pkg.github.com/ackama/dpc-user-management-module/drupal-dev:latest
          docker push docker.pkg.github.com/ackama/dpc-user-management-module/drupal-dev:latest

          docker tag dev_frontend:latest docker.pkg.github.com/ackama/dpc-user-management-module/frontend-dev:latest
          docker push docker.pkg.github.com/ackama/dpc-user-management-module/frontend-dev:latest

      - name: Wait for MariaDB container to start
        # MariaDB isn't fully ready until it has said "ready for connections"
        # **twice**. This while loop gathers the log output from the MariaDB
        # container and looks for that magic string. It will loop (sleeping 1
        # second on each loop) while it waits to see the magic string twice.
        working-directory: ./dev
        run: "while [ $(docker-compose logs mysql |grep 'mysqld: ready for connections' | wc -l | tr -d ' ') -ne '2' ]; do echo 'sleeping...' && sleep 1; done"

      - name: Dump info about running containers (for future debugging)
        working-directory: ./dev
        run: docker ps -a

      - name: Install Drupal
        working-directory: ./dev
        run: docker-compose exec -T drupal /root/install-drupal.sh

      - name: Run tests
        working-directory: ./dev
        # Show symfony deprecation warnings but don't fail on them. Many
        # warnings come from plugins we depend on and don't control.
        run: docker-compose exec -T --env SYMFONY_DEPRECATIONS_HELPER=disabled drupal /root/run-ci.sh
