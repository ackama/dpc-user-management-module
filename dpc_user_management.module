<?php
/**
 * This file is used for hooks
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\DPC_User_Management\UserEntity;
use Drupal\group\Entity\Group;
use Drupal\user\Entity\User;
use Drupal\dpc_user_management\Traits\HandlesEmailDomainGroupMembership;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * TODO: add helpful content or remove this hook
 * Implements hook_help().
 *
 * @param                     $route_name
 * @param RouteMatchInterface $route_match
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 */
function dpc_user_management_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.dpc_user_management':
            return t('
        <h2>User management module information.</h2>
      ');
    }
}

/**
 * Implements hook_entity_prepare_form().
 *
 * @param EntityInterface                      $entity
 * @param                                      $operation
 * @param FormStateInterface                   $form_state
 */
function dpc_user_management_user_prepare_form(
    EntityInterface $entity,
    $operation,
    FormStateInterface $form_state
) {
    if ($operation == 'default') {
        /** @var \Drupal\Core\Field\FieldItemList $addresses */
        try {
            $addresses = $entity->get('field_email_addresses');
            // Add the primary email to the list of email addresses if it is empty
            if (empty($addresses->getValue())) {
                $addresses->setValue([
                    [
                        'value'      => $entity->mail->value,
                        'status'     => 'verified',
                        'is_primary' => 1
                    ]
                ]);
            }
        } catch (\Exception $exception) {
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 * @param UserEntity $user
 */
function dpc_user_management_user_presave(UserEntity $user) {

    // Adds JSE Access when Special Group flag is turned on
    $_original = $user->original->get('special_group')->getValue()[0]['value'];
    $_new = $user->get('special_group')->getValue()[0]['value'];

    if ($_original !== $_new) {
        // Set access flag to true only if
        if($_new === 1) {
            $user->set('jse_access', 1);
        }

        // Toggles user access to content group
        /** @var Group $group */
        $group =  \Drupal::entityQuery('group')
            ->condition('type', 'dpc_module_group_type')
            ->accessCheck(false)
            ->execute();

        if($user->get('jse_access')->getValue()[0]['value']) {
            $group->addMember($user);
        } else {
            $group->removeMember($user);
        }
    }
}

/**
 * Implements hook_alter_form().
 *
 * @param                    $form
 * @param FormStateInterface $form_state
 * @param string             $form_id
 */
function dpc_user_management_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if ($form_id === 'user_form') {
        // remove the default email field
        unset($form['account']['mail']);

        $form['#attached']['library'][] = 'dpc_user_management/user_profile';

        if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
            unset($form['jse_access']);
        }

    }

    if ($form_id === 'user_register_form') {
        // hide email addresses form on registration
        unset($form['field_email_addresses']);

        if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
            unset($form['jse_access']);
        }
    }
}

/**
 * Implements hook_entity_type_build()
 *
 * @param EntityTypeInterface[] $entity_types
 */
function dpc_user_management_entity_type_build(&$entity_types)
{
    // User Entity class override
    if (isset($entity_types['user'])) {
        $entity_types['user']->setClass('Drupal\dpc_user_management\UserEntity');
    }
}

/**
 * Implements hook_user_login
 *
 * @param \Drupal\user\Entity\User $account
 */
function dpc_user_management_user_login($account)
{
    // On users first login, add them to a group if they have a whitelisted domain
    if ($account->getLastAccessedTime() == 0) {
        HandlesEmailDomainGroupMembership::addUserToGroups(User::load($account->id()), $account->getEmail());
    }

    // Set a warning for users with Invalidated emails
    $addresses = $account->field_email_addresses->getValue();
    if ($addresses) {
        foreach ($addresses as $address) {
            if ($address['status'] === 'unverified') {
                $user_profile_url = Url::fromRoute('entity.user.edit_form', ['user' => $account->id()])->toString();
                $message          = "You have an unverified email address, this may affect your ability to view some content. Go to your <a href='$user_profile_url'>account settings</a> page to re-verify or remove the email address.";
                $message          = new TranslatableMarkup ('@message', ['@message' => Markup::create($message)]);
                \Drupal::messenger()->addWarning($message);
            }
        }
    }
}

/**
 * Adds "is_primary" field to email addresses
 * Implements hook_update_N
 */
function dpc_user_management_update_8001()
{
    $database = \Drupal::database();
    $schema   = $database->schema();
    $schema->addField('user__field_email_addresses', 'field_email_addresses_is_primary', [
        'type'     => 'int',
        'size'     => 'tiny',
        'default'  => 0,
        'not null' => true,
    ]);
}
