<?php
/**
 * This file is used for hooks
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\dpc_user_management\Traits\HandlesEmailDomainGroupMembership;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 *
 * @param                     $route_name
 * @param RouteMatchInterface $route_match
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 */
function dpc_user_management_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.dpc_user_management':
            return t('
        <h2>User management module information.</h2>
      ');
    }
}

/**
 * Implemets hook_schema()
 */
function dpc_user_management_schema()
{
    $schema = [];

    $schema['dpc_group_events'] = [
        'description' => 'Table for DPC Group membership events.',
        'fields'      => [
            'id'      => [
                'description' => 'The primary key to store unique information.',
                'type'        => 'serial',
                'not null'    => true,
            ],
            'uid'     => [
                'description' => 'The primary identifier for a User.',
                'type'        => 'int',
                'unsigned'    => true,
                'not null'    => true,
            ],
            'gid'     => [
                'description' => 'The primary identifier for a Group.',
                'type'        => 'int',
                'unsigned'    => true,
                'not null'    => true,
            ],
            'name'    => [
                'description' => 'The name of the event',
                'type'        => 'varchar',
                'length'      => 32,
                'not null'    => true,
                'default'     => '',
            ],
            'status'  => [
                'description' => 'The status of the event',
                'type'        => 'varchar',
                'length'      => 32,
                'not null'    => false,
            ],
            'created' => [
                'type'     => 'int',
                'not null' => false,
                'size'     => 'normal',
            ],
            'changed' => [
                'type'     => 'int',
                'not null' => false,
                'size'     => 'normal',
            ],
        ],
        'primary key' => [
            'id',
        ],
    ];

    $schema[\Drupal\dpc_user_management\Controller\UserImportController::$table_name] =
        \Drupal\dpc_user_management\Controller\UserImportController::$schema;

    return $schema;
}

/**
 * Add records to the events table
 *
 * @param $name "event name"
 * @param $gid  "group id"
 * @param $uid  "user id"
 *
 * @throws Exception
 */
function dpc_log_event($name, $gid, $uid)
{
    $connection = \Drupal::database();
    $connection->insert('dpc_group_events')->fields([
        'name'    => $name,
        'uid'     => $uid,
        'gid'     => $gid,
        'status'  => 'pending',
        'created' => strtotime('now')
    ])->execute();
}

/**
 * Implements hook_entity_prepare_form().
 *
 * @param EntityInterface                      $entity
 * @param                                      $operation
 * @param FormStateInterface                   $form_state
 */
function dpc_user_management_user_prepare_form(
    EntityInterface $entity,
    $operation,
    FormStateInterface $form_state
) {
    if ($operation == 'default') {
        /** @var \Drupal\Core\Field\FieldItemList $addresses */
        try {
            $addresses = $entity->get('field_email_addresses');
            // Add the primary email to the list of email addresses if it is empty
            if (empty($addresses->getValue())) {
                $addresses->setValue([
                    [
                        'value'      => $entity->mail->value,
                        'status'     => 'verified',
                        'is_primary' => 1
                    ]
                ]);
            }
        } catch (\Exception $exception) {
        }
    }
}

/**
 * Implements hook_alter_form().
 *
 * @param                    $form
 * @param FormStateInterface $form_state
 * @param string             $form_id
 */
function dpc_user_management_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if ($form_id === 'user_form') {
        // remove the default email field
        unset($form['account']['mail']);

        // add asset library
        $form['#attached']['library'][] = 'dpc_user_management/user_profile';
        // add validation
        $form['#validate'][] = 'dpc_user_management_email_validation';

        if (!\Drupal::currentUser()->hasPermission('administer group fields')) {
            unset($form['jse_access']);
        }

    }

    if ($form_id === 'user_register_form') {
        // hide email addresses form on registration
        unset($form['field_email_addresses']);

        if (!\Drupal::currentUser()->hasPermission('administer group fields')) {
            unset($form['jse_access']);
        }
    }
}

/**
 * Implements hook_entity_type_build()
 *
 * @param EntityTypeInterface[] $entity_types
 */
function dpc_user_management_entity_type_build(&$entity_types)
{
    // User Entity class override
    if (isset($entity_types['user'])) {
        $entity_types['user']->setClass('Drupal\dpc_user_management\UserEntity');
    }
    if (isset($entity_types['group'])) {
        $entity_types['group']->setClass('Drupal\dpc_user_management\GroupEntity');
    }
}

/**
 * @param                                      $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function dpc_user_management_email_validation($form, &$form_state)
{
    if ($form_state->hasValue('field_email_addresses')) {
        $addresses             = $form_state->getValue('field_email_addresses');
        $has_primary_email_set = in_array(true, array_column($addresses, 'is_primary'));
        foreach ($addresses as $address) {
            // check if primary email is removed
            if (is_array($address)) {
                if ($address['is_primary'] && empty($address['value']) && !$has_primary_email_set) {
                    return $form_state->setErrorByName('field_email_addresses',
                        "Set another address as Primary before removing your Primary address");
                }

                if (empty($address['status']) && !empty($address['value'])) {
                    $email          = $address['value'];
                    $db             = \Drupal::database();
                    $address_exists = $db
                        ->query("select * from {user__field_email_addresses} where field_email_addresses_value = '$email'")
                        ->fetchAll();
                    if (!empty($address_exists)) {

                        return $form_state->setErrorByName('field_email_addresses', "The email $email is already in use.");
                    };
                }
            }
        }
    }
}

/**
 * Implements hook_user_login
 *
 * @param \Drupal\user\Entity\User $account
 */
function dpc_user_management_user_login($account)
{
    // On users first login, add them to a group if they have a whitelisted domain
    if ($account->getLastAccessedTime() == 0) {
        HandlesEmailDomainGroupMembership::addUserToGroups(User::load($account->id()), $account->getEmail());
    }

    // Set a warning for users with Invalidated emails
    $addresses = $account->field_email_addresses->getValue();
    if ($addresses) {
        foreach ($addresses as $address) {
            if ($address['status'] === 'unverified') {
                $user_profile_url = Url::fromRoute('entity.user.edit_form', ['user' => $account->id()])->toString();
                $message          = "You have an unverified email address, this may affect your ability to view some content. Go to your <a href='$user_profile_url'>account settings</a> page to re-verify or remove the email address.";
                $message          = new TranslatableMarkup ('@message', ['@message' => Markup::create($message)]);
                \Drupal::messenger()->addWarning($message);
            }
        }
    }
}

/**
 * Adds "is_primary" field to email addresses
 * Implements hook_update_N
 */
function dpc_user_management_update_8001()
{
    $database = \Drupal::database();
    $schema   = $database->schema();
    $schema->addField('user__field_email_addresses', 'field_email_addresses_is_primary', [
        'type'     => 'int',
        'size'     => 'tiny',
        'default'  => 0,
        'not null' => true,
    ]);
}
